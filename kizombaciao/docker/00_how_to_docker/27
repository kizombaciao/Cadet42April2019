docker service logs -f engineering-bay 

docker service logs -f $(docker service ps engineering-bay -f "name=engineering-bay.1" -q)

# Get the real-time logs of one the tasks 
# of the engineering-bay service.

# > docker service ps engineering-bay -f "name=engineering-bay.1" -q
# 6pg75g4sj8a0823txgf4aoybw
# -------------------------
# https://www.loggly.com/blog/best-practices-for-logging-in-docker-swarm/

# ???
# how do we know which containers are part of the same service ???
# is it defined by the cluster ???

# Swarm has two primary log destinations: 
# the daemon log (events generated by the Docker service), 
# and container logs (events generated by containers).

# Instead of showing logs on a per-container basis using 
# > 'docker logs <container name>', 
# Swarm shows logs on a per-service basis using 
# > 'docker service logs <service name>'.

# Normally you would access your logs 
# by connecting to a master node, running 
# > 'docker service logs <service name>', 
# and scrolling down to find the logs you’re looking for.

# Docker Swarm is a container orchestration and clustering tool
# It allows you to deploy container-based applications 
# across a number of computers running Docker.

# In Swarm, you don’t interact directly with containers, 
# but instead define services 
# that define what the final deployment will look like. 

# Swarm handles deploying, connecting, 
# and maintaining these containers until they meet the service definition.

# A swarm consists of manager nodes and worker nodes.

# With Swarm, you instead create a service 
# that defines what image to use, 
# how many replica containers to create, 
# and how those containers should interact 
# with both the host and each other. 
# For example, let’s deploy an Nginx image 
# with three containers (for load balancing) 
# and expose it over port 80.
# > docker service create --name nginx \
# --detach --publish 80:80 --replicas 3 nginx





